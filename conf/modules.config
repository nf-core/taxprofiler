/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DATABASE_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_${meta.run_accession}_raw" }
        publishDir = [
            path: { "${params.outdir}/fastqc/raw" },
            mode: params.publish_dir_mode,
            pattern: '*.html'
        ]
    }

    withName: FASTQC_PROCESSED {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_${meta.run_accession}_processed" }
        publishDir = [
            path: { "${params.outdir}/fastqc/processed" },
            mode: params.publish_dir_mode,
            pattern: '*.html'
        ]
    }

    withName: FASTP_SINGLE {
        ext.args   = [
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--disable_adapter_trimming" : "",
            params.shortread_qc_adapter1 ? "--adapter_sequence ${params.shortread_qc_adapter1}" : "",
            // filtering options
            "--length_required ${params.shortread_qc_minlength}",
            (params.perform_shortread_complexityfilter && params.shortread_complexityfilter_tool == 'fastp') ? "--low_complexity_filter --complexity_threshold ${params.shortread_complexityfilter_fastp_threshold}" : ''
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/fastp" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.save_preprocessed_reads
        ]
    }

    withName: FASTP_PAIRED {
        ext.args   = [
            // collapsing options - option to retain singletons
            params.shortread_qc_excludeunmerged ? '' : "--include_unmerged",
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--disable_adapter_trimming" : "",
            params.shortread_qc_adapter1 ? "--adapter_sequence ${params.shortread_qc_adapter1}" : "",
            params.shortread_qc_adapter2 ? "--adapter_sequence_r2 ${params.shortread_qc_adapter2}" : "--detect_adapter_for_pe",
            // filtering options
            "--length_required ${params.shortread_qc_minlength}",
            params.perform_shortread_complexityfilter && params.shortread_complexityfilter_tool == 'fastp' ? "--low_complexity_filter --complexity_threshold ${params.shortread_complexityfilter_fastp_threshold}" : ''
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/fastp" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.save_preprocessed_reads
        ]
    }

    withName: ADAPTERREMOVAL_SINGLE {
        ext.args   = [
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--adapter1 '' --adapter2 ''" : "",
            params.shortread_qc_adapter1 ? "--adapter1 ${params.shortread_qc_adapter1}" : "",
            // filtering options
            "--minlength ${params.shortread_qc_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/adapterremoval" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.save_preprocessed_reads
        ]
    }

    withName: ADAPTERREMOVAL_PAIRED {
        ext.args   = [
            // collapsing options
            params.shortread_qc_mergepairs ? "--collapse" : "",
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--adapter1 '' --adapter2 ''" : "",
            params.shortread_qc_adapter1 ? "--adapter1 ${params.shortread_qc_adapter1}" : "",
            params.shortread_qc_adapter2 ? "--adapter2 ${params.shortread_qc_adapter2}" : "",
            // filtering options
            "--minlength ${params.shortread_qc_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/adapterremoval" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.save_preprocessed_reads
        ]
    }

    withName: PORECHOP {
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/porechop" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.save_preprocessed_reads
        ]
    }

    withName: FILTLONG {
        ext.args = [
            "--min_length ${params.longread_qc_minlength}",
            "--keep_percent ${params.longread_qc_keep_percent}",
            "--target_bases ${params.longread_qc_target_bases}"
        ]
        .join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}_filtered" }
        publishDir = [
            path: { "${params.outdir}/filtlong" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.save_preprocessed_reads
        ]
    }

    withName: BOWTIE2_BUILD {
        publishDir = [
            path: { "${params.outdir}/bowtie2/build" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_index,
            pattern: 'bowtie2'
        ]
    }

    withName: BOWTIE2_ALIGN {
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            [
            path: { "${params.outdir}/bowtie2/align" },
            mode: params.publish_dir_mode,
            pattern: '*.log'
            ],
            [
            path: { "${params.outdir}/bowtie2/align" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_mapped,
            pattern: '*.bam'
            ],
            [
            path: { "${params.outdir}/bowtie2/align" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_unmapped,
            pattern: '*.fastq.gz'
            ]
        ]
    }

    withName: MINIMAP2_INDEX {
        ext.args = '-x map-ont'
        publishDir = [
            path: { "${params.outdir}/minimap2/index" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_index,
            pattern: 'minimap2'
        ]
    }

    withName: MINIMAP2_ALIGN {
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/minimap2/align" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_mapped,
            pattern: '*.bam'
        ]
    }

    withName: SAMTOOLS_VIEW {
        ext.args = '-f 4'
        ext.prefix = { "${meta.id}.mapped.sorted" }
        publishDir = [
            path: { "${params.outdir}/samtools/view" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_unmapped,
            pattern: '*.bam'
        ]
    }

    withName: SAMTOOLS_BAM2FQ {
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/samtools/bam2fq" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_unmapped,
            pattern: '*.fq.gz'
        ]
    }

    withName: BBMAP_BBDUK {
        ext.args =  [
                "entropy=${params.shortread_complexityfilter_entropy}",
                "entropywindow=${params.shortread_complexityfilter_bbduk_windowsize}",
                params.shortread_complexityfilter_bbduk_mask ?  "entropymask=t" : "entropymask=f"
            ].join(' ').trim()
        ext.prefix = { "${meta.id}-${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/bbduk/" },
            mode: params.publish_dir_mode,
            pattern: '*.{fastq.gz,log}',
            enabled: params.save_complexityfiltered_reads
        ]
    }

    withName: PRINSEQPLUSPLUS {
        ext.args =  [
                params.shortread_complexityfilter_prinseqplusplus_mode == 'dust' ? "-lc_dust=${params.shortread_complexityfilter_prinseqplusplus_dustscore}" : "-lc_entropy=${params.shortread_complexityfilter_entropy}",
                "-trim_qual_left=0 -trim_qual_left=0 -trim_qual_window=0 -trim_qual_step=0"
            ].join(' ').trim()
        ext.prefix = { "${meta.id}-${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/prinseqplusplus/" },
            mode: params.publish_dir_mode,
            pattern: '*{_good_out.fastq.gz,_good_out_R1.fastq.gz,_good_out_R2.fastq.gz,log}',
            enabled: params.save_complexityfiltered_reads
        ]
    }

    withName: CAT_FASTQ {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/run_merging/" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.save_runmerged_reads
        ]
    }

    withName: MALT_RUN {
        ext.args = { "${meta.db_params}" }
        // one run with multiple samples, so fix ID to just db name to ensure clean log name
        ext.prefix = { "${meta.db_name}" }
        publishDir = [
            path: { "${params.outdir}/malt/${meta.db_name}" },
            mode: params.publish_dir_mode,
            pattern: '*.{rma6,log,sam}'
        ]
    }

    withName: MEGAN_RMA2INFO {
        ext.args = "-c2c Taxonomy"
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/malt/${meta.db_name}" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt.gz,megan}'
        ]
    }

    withName: KRAKEN2_KRAKEN2 {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}-${meta.db_name}" } : { "${meta.id}-${meta.run_accession}-${meta.db_name}" }
        publishDir = [
            path: { "${params.outdir}/kraken2/${meta.db_name}" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt,report,fastq.gz}'
        ]
    }

    withName: KRONA_KTIMPORTTEXT {
        publishDir = [
            path: { "${params.outdir}/krona" },
            mode: params.publish_dir_mode,
            pattern: '*.{html}'
        ]
    }

    withName: METAPHLAN3 {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}-${meta.db_name}" } : { "${meta.id}-${meta.run_accession}-${meta.db_name}" }
        publishDir = [
            path: { "${params.outdir}/metaphlan3/${meta.db_name}" },
            mode: params.publish_dir_mode,
            pattern: '*.{biom,txt}'
        ]
    }

    withName: CENTRIFUGE_CENTRIFUGE {
        publishDir = [
            path: { "${params.outdir}/centrifuge/${meta.db_name}" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt,sam,gz}'
        ]
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}-${meta.db_name}" } : { "${meta.id}-${meta.run_accession}-${meta.db_name}" }
    }

    withName: CENTRIFUGE_KREPORT {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}-${meta.db_name}" } : { "${meta.id}-${meta.run_accession}-${meta.db_name}" }
        publishDir = [
            path: { "${params.outdir}/centrifuge/${meta.db_name}" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt}'
        ]
    }

    withName: KAIJU_KAIJU {
        publishDir = [
            path: { "${params.outdir}/kaiju/${meta.db_name}" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ]
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}-${meta.db_name}" } : { "${meta.id}-${meta.run_accession}-${meta.db_name}" }
    }

    withName: KAIJU_KAIJU2TABLE {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}-${meta.db_name}" } : { "${meta.id}-${meta.run_accession}-${meta.db_name}" }
        publishDir = [
            path: { "${params.outdir}/kaiju/${meta.db_name}" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt}'
        ]
    }

    withName: KAIJU_KAIJU2KRONA {
        ext.args = '-v -u'
    }

    withName: DIAMOND_BLASTX {
        ext.args = { "${meta.db_params}" }
        ext.prefix = params.perform_runmerging ? { "${meta.id}-${meta.db_name}" } : { "${meta.id}-${meta.run_accession}-${meta.db_name}" }
        publishDir = [
            path: { "${params.outdir}/diamond/${meta.db_name}" },
            mode: params.publish_dir_mode,
            pattern: '*.{blast,xml,txt,daa,sam,tsv,paf}'
        ]
    }

    withName: MOTUS_PROFILE {
        publishDir = [
            path: { "${params.outdir}/motus/${meta.db_name}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
